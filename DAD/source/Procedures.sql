-- MySQL dump 10.13
--
-- Host: 127.0.0.1    Database: mysql
-- ------------------------------------------------------
-- Server version	5.1.21-beta-community-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `proc`
--

DROP TABLE IF EXISTS `proc`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `proc` (
  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `name` char(64) NOT NULL DEFAULT '',
  `type` enum('FUNCTION','PROCEDURE') NOT NULL,
  `specific_name` char(64) NOT NULL DEFAULT '',
  `language` enum('SQL') NOT NULL DEFAULT 'SQL',
  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',
  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',
  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',
  `param_list` blob NOT NULL,
  `returns` char(64) NOT NULL DEFAULT '',
  `body` longblob NOT NULL,
  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE') NOT NULL DEFAULT '',
  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `body_utf8` longblob,
  PRIMARY KEY (`db`,`name`,`type`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures';
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `proc`
--

LOCK TABLES `proc` WRITE;
/*!40000 ALTER TABLE `proc` DISABLE KEYS */;
INSERT INTO `proc` VALUES ('dad','InsertEvent','PROCEDURE','InsertEvent','SQL','CONTAINS_SQL','NO','INVOKER','IN intTimeGenerated INTEGER, IN vcSystemName VARCHAR(45), IN vcServiceName VARCHAR(45), IN vcEventLine VARCHAR(8192)','','BEGIN\r\n         /* ----- Initialize variables ----- */\r\n        DECLARE intSystemID INT DEFAULT 0;\r\n        DECLARE intServiceID INT DEFAULT 0;\r\n        DECLARE intEventID INT DEFAULT 0;\r\n        DECLARE intStatus INT DEFAULT 0;\r\n        DECLARE intUniqueStatus INT DEFAULT 0;\r\n        DECLARE vcString VARCHAR(767);\r\n        DECLARE intStringID INT DEFAULT 0;\r\n        DECLARE intPosition TINYINT DEFAULT 0;\r\n        DECLARE intUniqueFieldID INT DEFAULT 0;\r\n        DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n        BEGIN\r\n                SELECT \"Error\";\r\n        ROLLBACK;\r\n        END;\r\n\r\n        DECLARE CONTINUE HANDLER FOR 1062 SET intUniqueStatus=1;\r\n        DECLARE CONTINUE HANDLER FOR NOT FOUND SET intStatus=1;\r\n        /* ----- Convert system_name and service_name into ids ----- */\r\n        SELECT System_ID FROM dad_sys_systems WHERE System_Name = vcSystemName INTO intSystemID;\r\n        IF intStatus = 1 THEN\r\n                INSERT INTO dad_sys_systems (System_Name) VALUES (vcSystemName);\r\n                SELECT LAST_INSERT_ID() INTO intSystemID;\r\n                SET intStatus=0;\r\n        END IF;\r\n        SELECT Service_ID FROM dad_sys_services WHERE Service_Name = vcServiceName INTO intServiceID;\r\n        IF intStatus = 1 THEN\r\n                INSERT INTO dad_sys_services (Service_Name) VALUES (vcServiceName);\r\n                SELECT LAST_INSERT_ID() INTO intServiceID;\r\n                SET intStatus=0;\r\n        END IF;\r\n\r\n        /* ----- Continue if system and service names were able to be looked up -----*/\r\n        IF intStatus = 1 THEN\r\n                SELECT \"Error - missing service or system name\";\r\n        ELSE\r\n                SET AUTOCOMMIT=0;\r\n                START TRANSACTION;\r\n                /* ----- Insert into events table ----- */\r\n                INSERT INTO Events (Time_Generated,Time_Written,System_ID,Service_ID)  VALUES (intTimeGenerated, UNIX_TIMESTAMP(CURRENT_TIMESTAMP), intSystemID, intServiceID);\r\n                SELECT LAST_INSERT_ID() INTO intEventID;\r\n\r\n                /* ----- Insert strings into event_unique_strings, unique_fields, and event_fields -----*/\r\n                REPEAT\r\n                        SET intPosition = intPosition + 1;\r\n                        SET vcString = LTRIM(SUBSTRING(SUBSTRING_INDEX(vcEventLine,\' \',intPosition),LENGTH(SUBSTRING_INDEX(vcEventLine,\' \',intPosition-1))+1));\r\n\r\n\r\n                        /* Get String ID for string */\r\n                        SELECT String_ID FROM event_unique_strings WHERE string=vcString INTO intStringID;\r\n                        IF intStatus = 1 THEN\r\n                                INSERT INTO event_unique_strings (string) VALUES (vcString);\r\n                                IF intUniqueStatus=1 THEN\r\n                                        SELECT String_ID FROM event_unique_strings WHERE string=vcString INTO intStringID;\r\n                                        SET intUniqueStatus=0;\r\n                                ELSE\r\n                                        SELECT LAST_INSERT_ID() INTO intStringID;\r\n                                END IF;\r\n                                SET intStatus=0;\r\n                        END IF;\r\n                        /* Get Unique Field ID */\r\n                        SELECT Unique_Field_ID FROM unique_fields WHERE String_ID=intStringID AND Position=intPosition INTO intUniqueFieldID;\r\n                        IF intStatus = 1 THEN\r\n                                INSERT INTO unique_fields (String_ID,Position) VALUES (intStringID,intPosition);\r\n                                SELECT LAST_INSERT_ID() INTO intUniqueFieldID;\r\n                                SET intStatus=0;\r\n                        END IF;\r\n\r\n                        /* Insert into event fields */\r\n                        INSERT INTO event_fields (Events_ID,Unique_Field_ID) VALUES (intEventID, intUniqueFieldID);\r\n                        UNTIL vcEventLine = SUBSTRING_INDEX(vcEventLine, \' \',intPosition)\r\n                END REPEAT;\r\n                COMMIT;\r\n                SELECT \"OK\";\r\n        END IF;\r\nEND','root@%','2007-11-14 18:57:46','2007-11-14 18:57:46','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\n         /* ----- Initialize variables ----- */\r\n        DECLARE intSystemID INT DEFAULT 0;\r\n        DECLARE intServiceID INT DEFAULT 0;\r\n        DECLARE intEventID INT DEFAULT 0;\r\n        DECLARE intStatus INT DEFAULT 0;\r\n        DECLARE intUniqueStatus INT DEFAULT 0;\r\n        DECLARE vcString VARCHAR(767);\r\n        DECLARE intStringID INT DEFAULT 0;\r\n        DECLARE intPosition TINYINT DEFAULT 0;\r\n        DECLARE intUniqueFieldID INT DEFAULT 0;\r\n        DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n        BEGIN\r\n                SELECT \"Error\";\r\n        ROLLBACK;\r\n        END;\r\n\r\n        DECLARE CONTINUE HANDLER FOR 1062 SET intUniqueStatus=1;\r\n        DECLARE CONTINUE HANDLER FOR NOT FOUND SET intStatus=1;\r\n        /* ----- Convert system_name and service_name into ids ----- */\r\n        SELECT System_ID FROM dad_sys_systems WHERE System_Name = vcSystemName INTO intSystemID;\r\n        IF intStatus = 1 THEN\r\n                INSERT INTO dad_sys_systems (System_Name) VALUES (vcSystemName);\r\n                SELECT LAST_INSERT_ID() INTO intSystemID;\r\n                SET intStatus=0;\r\n        END IF;\r\n        SELECT Service_ID FROM dad_sys_services WHERE Service_Name = vcServiceName INTO intServiceID;\r\n        IF intStatus = 1 THEN\r\n                INSERT INTO dad_sys_services (Service_Name) VALUES (vcServiceName);\r\n                SELECT LAST_INSERT_ID() INTO intServiceID;\r\n                SET intStatus=0;\r\n        END IF;\r\n\r\n        /* ----- Continue if system and service names were able to be looked up -----*/\r\n        IF intStatus = 1 THEN\r\n                SELECT \"Error - missing service or system name\";\r\n        ELSE\r\n                SET AUTOCOMMIT=0;\r\n                START TRANSACTION;\r\n                /* ----- Insert into events table ----- */\r\n                INSERT INTO Events (Time_Generated,Time_Written,System_ID,Service_ID)  VALUES (intTimeGenerated, UNIX_TIMESTAMP(CURRENT_TIMESTAMP), intSystemID, intServiceID);\r\n                SELECT LAST_INSERT_ID() INTO intEventID;\r\n\r\n                /* ----- Insert strings into event_unique_strings, unique_fields, and event_fields -----*/\r\n                REPEAT\r\n                        SET intPosition = intPosition + 1;\r\n                        SET vcString = LTRIM(SUBSTRING(SUBSTRING_INDEX(vcEventLine,\' \',intPosition),LENGTH(SUBSTRING_INDEX(vcEventLine,\' \',intPosition-1))+1));\r\n\r\n\r\n                        /* Get String ID for string */\r\n                        SELECT String_ID FROM event_unique_strings WHERE string=vcString INTO intStringID;\r\n                        IF intStatus = 1 THEN\r\n                                INSERT INTO event_unique_strings (string) VALUES (vcString);\r\n                                IF intUniqueStatus=1 THEN\r\n                                        SELECT String_ID FROM event_unique_strings WHERE string=vcString INTO intStringID;\r\n                                        SET intUniqueStatus=0;\r\n                                ELSE\r\n                                        SELECT LAST_INSERT_ID() INTO intStringID;\r\n                                END IF;\r\n                                SET intStatus=0;\r\n                        END IF;\r\n                        /* Get Unique Field ID */\r\n                        SELECT Unique_Field_ID FROM unique_fields WHERE String_ID=intStringID AND Position=intPosition INTO intUniqueFieldID;\r\n                        IF intStatus = 1 THEN\r\n                                INSERT INTO unique_fields (String_ID,Position) VALUES (intStringID,intPosition);\r\n                                SELECT LAST_INSERT_ID() INTO intUniqueFieldID;\r\n                                SET intStatus=0;\r\n                        END IF;\r\n\r\n                        /* Insert into event fields */\r\n                        INSERT INTO event_fields (Events_ID,Unique_Field_ID) VALUES (intEventID, intUniqueFieldID);\r\n                        UNTIL vcEventLine = SUBSTRING_INDEX(vcEventLine, \' \',intPosition)\r\n                END REPEAT;\r\n                COMMIT;\r\n                SELECT \"OK\";\r\n        END IF;\r\nEND'),('dad','ResetEvents','PROCEDURE','ResetEvents','SQL','CONTAINS_SQL','NO','DEFINER','','','BEGIN\r\n  UPDATE dad_sys_event_import_from SET Next_Run=0;\r\n  DELETE FROM dad_sys_cis_imported;\r\n  DELETE FROM events;\r\n  DELETE FROM event_fields;\r\n  DELETE FROM event_unique_strings;\r\n#  DELETE FROM unique_fields;\r\nEND','root@%','2007-11-30 15:19:50','2007-11-30 15:19:50','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\n  UPDATE dad_sys_event_import_from SET Next_Run=0;\r\n  DELETE FROM dad_sys_cis_imported;\r\n  DELETE FROM events;\r\n  DELETE FROM event_fields;\r\n  DELETE FROM event_unique_strings;\r\n#  DELETE FROM unique_fields;\r\nEND'),('dad','GetEventByID','PROCEDURE','GetEventByID','SQL','CONTAINS_SQL','NO','DEFINER','IN intEventID BIGINT(20)','','BEGIN\r\n	SELECT\r\n		f.Events_ID,\r\n		FROM_UNIXTIME(e.Time_Generated),\r\n		systems.System_Name,\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \' \')\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID=intEventID\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n         GROUP BY\r\n                 f.Events_ID;\r\n\r\nEND','root@%','2007-11-15 16:33:52','2007-11-15 16:33:52','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\n	SELECT\r\n		f.Events_ID,\r\n		FROM_UNIXTIME(e.Time_Generated),\r\n		systems.System_Name,\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \' \')\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID=intEventID\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n         GROUP BY\r\n                 f.Events_ID;\r\n\r\nEND'),('dad','GetEventIDsByString','PROCEDURE','GetEventIDsByString','SQL','CONTAINS_SQL','NO','DEFINER','IN strSearchString VARCHAR(767)','','BEGIN\r\n	SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		event_fields as e1, event_unique_strings as s1\r\n	WHERE\r\n		e1.String_ID=s1.String_ID AND\r\n		s1.String=strSearchString;\r\nEND','root@%','2007-11-16 01:26:19','2007-11-16 01:26:19','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\n	SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		event_fields as e1, event_unique_strings as s1\r\n	WHERE\r\n		e1.String_ID=s1.String_ID AND\r\n		s1.String=strSearchString;\r\nEND'),('dad','GetEventsBy1StringLimited','PROCEDURE','GetEventsBy1StringLimited','SQL','CONTAINS_SQL','NO','DEFINER','IN strSearchString VARCHAR(767), IN intStart BIGINT(20), IN intLimit BIGINT(20), IN intSeconds INTEGER','','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events, event_fields as e1, event_unique_strings as s1\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n\r\n		e1.String_ID=s1.String_ID AND\r\n		s1.String=strSearchString;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND','root@%','2007-11-18 19:36:15','2007-11-18 19:36:15','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events, event_fields as e1, event_unique_strings as s1\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n\r\n		e1.String_ID=s1.String_ID AND\r\n		s1.String=strSearchString;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND'),('dad','GetEventsBy2StringsLimited','PROCEDURE','GetEventsBy2StringsLimited','SQL','CONTAINS_SQL','NO','DEFINER','IN strSearchString1 VARCHAR(767), strSearchString2 VARCHAR(767), IN intStart BIGINT(20), IN intLimit BIGINT(20), IN intSeconds INTEGER','','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events, event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n\r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND','root@%','2007-11-18 19:36:39','2007-11-18 19:36:39','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events, event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n\r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND'),('dad','GetEventsBy3StringsLimited','PROCEDURE','GetEventsBy3StringsLimited','SQL','CONTAINS_SQL','NO','DEFINER','IN strSearchString1 VARCHAR(767), strSearchString2 VARCHAR(767), IN strSearchString3 VARCHAR(767), IN intStart BIGINT(20), IN intLimit BIGINT(20), IN intSeconds INTEGER','','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2, event_fields as e3, event_unique_strings as s3\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND','root@%','2007-11-18 19:37:06','2007-11-18 19:37:06','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2, event_fields as e3, event_unique_strings as s3\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND'),('dad','GetEventsBy4StringsLimited','PROCEDURE','GetEventsBy4StringsLimited','SQL','CONTAINS_SQL','NO','DEFINER','IN strSearchString1 VARCHAR(767), strSearchString2 VARCHAR(767),\r\n                        IN strSearchString3 VARCHAR(767), IN strSearchString4 VARCHAR(767), IN intStart BIGINT(20), IN intLimit BIGINT(20), IN intSeconds INTEGER','','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2,\r\n                event_fields as e3, event_unique_strings as s3,\r\n                event_fields as e4, event_unique_strings as s4\r\n\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n        \r\n                e4.Events_ID=e1.Events_ID AND\r\n                e4.String_ID=s4.String_ID AND\r\n		s4.String=strSearchString4 AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n                \r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND','root@%','2007-11-18 19:37:27','2007-11-18 19:37:27','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2,\r\n                event_fields as e3, event_unique_strings as s3,\r\n                event_fields as e4, event_unique_strings as s4\r\n\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n        \r\n                e4.Events_ID=e1.Events_ID AND\r\n                e4.String_ID=s4.String_ID AND\r\n		s4.String=strSearchString4 AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n                \r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND'),('dad','GetEventsBy5StringsLimited','PROCEDURE','GetEventsBy5StringsLimited','SQL','CONTAINS_SQL','NO','DEFINER','IN strSearchString1 VARCHAR(767), strSearchString2 VARCHAR(767),\r\n                        IN strSearchString3 VARCHAR(767), IN strSearchString4 VARCHAR(767), IN strSearchString5 VARCHAR(767),\r\n                        IN intStart BIGINT(20), IN intLimit BIGINT(20), IN intSeconds INTEGER','','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2,\r\n                event_fields as e3, event_unique_strings as s3,\r\n                event_fields as e4, event_unique_strings as s4,\r\n                event_fields as e5, event_unique_strings as s5\r\n\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n        \r\n                e5.Events_ID=e1.Events_ID AND\r\n                e5.String_ID=s5.String_ID AND\r\n		s5.String=strSearchString5 AND\r\n\r\n                e4.Events_ID=e1.Events_ID AND\r\n                e4.String_ID=s4.String_ID AND\r\n		s4.String=strSearchString4 AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n                \r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND','root@%','2007-11-18 19:37:47','2007-11-18 19:37:47','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2,\r\n                event_fields as e3, event_unique_strings as s3,\r\n                event_fields as e4, event_unique_strings as s4,\r\n                event_fields as e5, event_unique_strings as s5\r\n\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n        \r\n                e5.Events_ID=e1.Events_ID AND\r\n                e5.String_ID=s5.String_ID AND\r\n		s5.String=strSearchString5 AND\r\n\r\n                e4.Events_ID=e1.Events_ID AND\r\n                e4.String_ID=s4.String_ID AND\r\n		s4.String=strSearchString4 AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n                \r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND'),('dad','GetEventsBy6StringsLimited','PROCEDURE','GetEventsBy6StringsLimited','SQL','CONTAINS_SQL','NO','DEFINER','IN strSearchString1 VARCHAR(767), strSearchString2 VARCHAR(767),\r\n                        IN strSearchString3 VARCHAR(767), IN strSearchString4 VARCHAR(767), IN strSearchString5 VARCHAR(767), IN strSearchString6 VARCHAR(767),\r\n                        IN intStart BIGINT(20), IN intLimit BIGINT(20), IN intSeconds INTEGER','','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2,\r\n                event_fields as e3, event_unique_strings as s3,\r\n                event_fields as e4, event_unique_strings as s4,\r\n                event_fields as e5, event_unique_strings as s5,\r\n                event_fields as e6, event_unique_strings as s6\r\n\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n        \r\n                e6.Events_ID=e1.Events_ID AND\r\n                e6.String_ID=s6.String_ID AND\r\n		s6.String=strSearchString6 AND\r\n\r\n                e5.Events_ID=e1.Events_ID AND\r\n                e5.String_ID=s5.String_ID AND\r\n		s5.String=strSearchString5 AND\r\n\r\n                e4.Events_ID=e1.Events_ID AND\r\n                e4.String_ID=s4.String_ID AND\r\n		s4.String=strSearchString4 AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n                \r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND','root@%','2007-11-18 19:38:06','2007-11-18 19:38:06','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\nSET @_intStart=intStart;\r\nSET @_intLimit=intLimit;\r\n\r\n    DROP TEMPORARY TABLE IF EXISTS tmpEventIDs;\r\n    CREATE TEMPORARY TABLE tmpEventIDs (\r\n        ID BIGINT(20) NOT NULL PRIMARY KEY\r\n    ) ENGINE=MEMORY;\r\n\r\n    INSERT INTO tmpEventIDs (ID)\r\n        SELECT\r\n		DISTINCT e1.Events_ID\r\n	FROM\r\n		events,event_fields as e1, event_fields as e2, event_unique_strings as s1, event_unique_strings as s2,\r\n                event_fields as e3, event_unique_strings as s3,\r\n                event_fields as e4, event_unique_strings as s4,\r\n                event_fields as e5, event_unique_strings as s5,\r\n                event_fields as e6, event_unique_strings as s6\r\n\r\n	WHERE\r\n                (e1.Events_ID=events.Events_ID AND events.Time_Generated>(UNIX_TIMESTAMP(NOW())-intSeconds)) AND\r\n        \r\n                e6.Events_ID=e1.Events_ID AND\r\n                e6.String_ID=s6.String_ID AND\r\n		s6.String=strSearchString6 AND\r\n\r\n                e5.Events_ID=e1.Events_ID AND\r\n                e5.String_ID=s5.String_ID AND\r\n		s5.String=strSearchString5 AND\r\n\r\n                e4.Events_ID=e1.Events_ID AND\r\n                e4.String_ID=s4.String_ID AND\r\n		s4.String=strSearchString4 AND\r\n\r\n                e3.Events_ID=e1.Events_ID AND\r\n                e3.String_ID=s3.String_ID AND\r\n		s3.String=strSearchString3 AND\r\n                \r\n		e1.String_ID=s1.String_ID AND\r\n                e2.Events_ID=e1.Events_ID AND\r\n                e2.String_ID=s2.String_ID AND\r\n		s1.String=strSearchString1 AND\r\n		s2.String=strSearchString2;\r\n\r\nPREPARE statement FROM \'\r\n        SELECT\r\n		f.Events_ID as \"Event #\",\r\n		FROM_UNIXTIME(e.Time_Generated) as \"Time Generated\",\r\n		systems.System_Name as \"System\",\r\n		GROUP_CONCAT(s.String ORDER BY f.Position ASC separator \" \") as \"Event Detail\"\r\n	FROM\r\n		events as e,\r\n		event_fields as f,\r\n		event_unique_strings as s,\r\n		dad_sys_systems as systems\r\n	WHERE\r\n		e.Events_ID IN (SELECT * FROM tmpEventIDs)\r\n		AND f.Events_ID=e.Events_ID\r\n		AND f.String_ID=s.String_ID\r\n		AND systems.System_ID=e.System_ID\r\n        GROUP BY\r\n                f.Events_ID\r\n        ORDER BY\r\n                e.Time_Generated ASC\r\n                \r\n        LIMIT ?,?\';\r\nEXECUTE statement USING @_intStart, @_intLimit;\r\nDEALLOCATE PREPARE statement;\r\n\r\nEND'),('dad','RereadEvents','PROCEDURE','RereadEvents','SQL','CONTAINS_SQL','NO','DEFINER','','','BEGIN\r\n  update dad_sys_cis_imported SET LastLogEntry=0;\r\n  UPDATE dad_sys_event_import_from SET Next_Run=0;\r\nEND','root@%','2007-11-30 17:47:08','2007-11-30 17:47:08','STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER','','utf8','utf8_general_ci','latin1_swedish_ci','BEGIN\r\n  update dad_sys_cis_imported SET LastLogEntry=0;\r\n  UPDATE dad_sys_event_import_from SET Next_Run=0;\r\nEND');
/*!40000 ALTER TABLE `proc` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2007-12-04  5:45:19
